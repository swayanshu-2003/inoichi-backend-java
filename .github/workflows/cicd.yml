name: Build and Deploy Spring Boot App

# Trigger the workflow on push to the master branch or when a pull request is merged
on:
  push:
    branches:
      - master

jobs:
  # Job to build and push Docker image
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 for Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # You can use other distributions like 'zulu', 'adopt', etc.
          java-version: '17'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build the project using Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Step 5: Set up Docker and log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 6: Build the Docker image with the multi-stage Dockerfile
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/inoichi-project:latest .

      # Step 7: Push the Docker image to Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/inoichi-project:latest

  # Job to deploy to Render
  deploy:
    name: Deploy
    needs: [build]  # Deploy only runs after the build job
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to production on Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID }}  # Render service ID
          api-key: ${{ secrets.RENDER_API_KEY }}  # Render API key from Render Dashboard